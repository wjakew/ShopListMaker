/*
JAKUB WAWAK
ALL RIGHTS RESERVED.
kubawawak@gmail.com
 */
package shoplistmaker;

import java.io.FileNotFoundException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jakubwawak
 */
public class korekta_window extends javax.swing.JDialog {

    /**
     * Creates new form korekta_window
     */
    
    DefaultListModel<String> model_koszyka;
    DefaultListModel<String> model_listy;
    
    String table_c, list_c;
    
    InfoHandler info;
    
    public korekta_window(java.awt.Frame parent, boolean modal,InfoHandler info) {
        super(parent, modal);
        model_koszyka = new DefaultListModel<String>();
        this.info=info;
        refresh_list();
        refresh_koszyk();
        initComponents();
        setLocationRelativeTo(null);
        setVisible(true);
    }
    
    void refresh_list(){
        model_listy = new DefaultListModel<String>();
        
        model_listy.addElement("Groceries");
        model_listy.addElement("Drinks");
        model_listy.addElement("Spices");
        model_listy.addElement("Pastry");
        model_listy.addElement("Snacks");
        model_listy.addElement("Chemia");
        model_listy.addElement("Diary");
        model_listy.addElement("Healthy food");
        model_listy.addElement("Other");
    }   
    
    void refresh_koszyk(){
        model_koszyka.clear();
        for(String f : info.act_cart.brak_kategorii){
            model_koszyka.addElement(f);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nadaj_kategorie_button = new javax.swing.JButton();
        usun_wszystko_button = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        kategoria = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        koszyk = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Elements to edit:");

        nadaj_kategorie_button.setText("-->");
        nadaj_kategorie_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nadaj_kategorie_buttonActionPerformed(evt);
            }
        });

        usun_wszystko_button.setText("Delete Everything");
        usun_wszystko_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usun_wszystko_buttonActionPerformed(evt);
            }
        });

        kategoria.setModel(model_listy);
        jScrollPane2.setViewportView(kategoria);

        jLabel2.setText("Category:");

        koszyk.setModel(model_koszyka);
        jScrollPane3.setViewportView(koszyk);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(usun_wszystko_button, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(189, 189, 189)
                        .addComponent(jLabel2)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nadaj_kategorie_button, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nadaj_kategorie_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(usun_wszystko_button)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nadaj_kategorie_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nadaj_kategorie_buttonActionPerformed
        String koszyk_sel = koszyk.getSelectedValue();
        String kategoria_sel = kategoria.getSelectedValue();
        
        if(koszyk_sel.equals("") || kategoria_sel.equals("")){
            JOptionPane.showMessageDialog(this, "Wrong selection");
        }
        
        else{//tutaj wchodzimy do poprawnego kodu nadania kategorii
            
            //tutaj otwieramy slownik poniewaz aktualizuje sie on przy kazdej nowej liscie
            DictReader dr = new DictReader("",info);
            //bedziemy uczyc slownik przy kazdym nadawaniu kategorii nowych slow kluczowych
            
            if(kategoria_sel.equals("Groceries")){
                info.act_cart.warzywaiowoce.add(koszyk_sel);
                try {
                    dr.dodaj("%warzywaiowoce", koszyk_sel);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(korekta_window.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if(kategoria_sel.equals("Drinks")){
                info.act_cart.napoje.add(koszyk_sel);
                try {
                    dr.dodaj("%napoje", koszyk_sel);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(korekta_window.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if(kategoria_sel.equals("Spieces")){
                info.act_cart.przyprawy.add(koszyk_sel);
                try {
                    dr.dodaj("%przyprawy", koszyk_sel);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(korekta_window.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if(kategoria_sel.equals("Pastry")){
                info.act_cart.pieczywo.add(koszyk_sel);
                try {
                    dr.dodaj("%pieczywo", koszyk_sel);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(korekta_window.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if(kategoria_sel.equals("Snacks")){
                info.act_cart.przekaski.add(koszyk_sel);
                try {
                    dr.dodaj("%przekaski", koszyk_sel);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(korekta_window.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if(kategoria_sel.equals("Chemia")){
                info.act_cart.chemia.add(koszyk_sel);
                try {
                    dr.dodaj("%chemia", koszyk_sel);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(korekta_window.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if(kategoria_sel.equals("Diary")){
                info.act_cart.nabial.add(koszyk_sel);
                try {
                    dr.dodaj("%nabial", koszyk_sel);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(korekta_window.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if(kategoria_sel.equals("Healhy food")){
                info.act_cart.zdrowezywienie.add(koszyk_sel);
                try {
                    dr.dodaj("%zdrowezywienie", koszyk_sel);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(korekta_window.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if(kategoria_sel.equals("Other")){
                info.act_cart.zdrowezywienie.add(koszyk_sel);
                try {
                    dr.dodaj("%inne", koszyk_sel);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(korekta_window.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            info.act_cart.brak_kategorii.remove(koszyk_sel);
            if(info.act_cart.brak_kategorii.isEmpty()){
                JOptionPane.showMessageDialog(this, "Categories have been added");
                setVisible(false);
                dispose();
            }
            refresh_koszyk();
            
        }
    }//GEN-LAST:event_nadaj_kategorie_buttonActionPerformed

    private void usun_wszystko_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usun_wszystko_buttonActionPerformed
        info.act_cart.brak_kategorii.clear();
        setVisible(false);
        dispose();
    }//GEN-LAST:event_usun_wszystko_buttonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> kategoria;
    private javax.swing.JList<String> koszyk;
    private javax.swing.JButton nadaj_kategorie_button;
    private javax.swing.JButton usun_wszystko_button;
    // End of variables declaration//GEN-END:variables
}
